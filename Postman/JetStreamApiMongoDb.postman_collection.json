{
	"info": {
		"_postman_id": "45b3f302-d09f-42ff-844d-d771c33fb0a8",
		"name": "JetStreamApiMongoDb",
		"description": "This Postman collection, named **JetStreamApiMongoDb**, is designed to interact with a backend system, presumably for managing users and order submissions. It consists of various API calls to authenticate users, register new users, manage order submissions, and manipulate user states. Below is an overview of the included requests and their purposes:\n\n### Authentication and User Management\n\n- **AdminAuthenticate**: Authenticates an admin user and stores the returned token for subsequent requests.\n- **UserAuthenticate**: Authenticates a regular user and stores the token similarly.\n- **UserRegister**: Registers a new user with a username, password, and role.\n- **UserUnlock**: Unlocks a user account, presumably after it has been locked due to failed login attempts or other security reasons.\n- **ById-User**: Contains two requests with the same name but different methods (DELETE and GET), used to delete a user by ID and retrieve user details by ID, respectively.\n- **All-User**: Retrieves a list of all users, along with their details.\n    \n\n### Order Submission Management\n\n- **NewOrderSubmission**: Creates a new order with details such as names, contact information, service and priority IDs, dates, and comments.\n- **ById-OrderSubmission**: Includes two requests, one for retrieving and another for deleting an order by its ID.\n- **All-OrderSubmission**: Retrieves a list of all orders along with their details.\n- **ChangeOrderSubmissionToUser**: Changes the user associated with an order submission.\n- **AssignOrderSubmissionToUser**: Assigns an order submission to a specific user.\n- **ById-UpdateOrderSubmission**: Updates the details of an existing order submission by its ID.\n- **ById-CancelOrderSubmission**: Cancels an order submission by its ID.\n    \n\n### Authorization\n\nThe collection uses Bearer Token authentication for securing API requests. Tokens acquired during user authentication (AdminAuthenticate or UserAuthenticate) are stored and used in subsequent API calls.\n\n### Event Listeners\n\nThere are placeholders for pre-request and test scripts at the collection level, indicating that custom logic can be executed before sending a request or after receiving a response.\n\n### Variables\n\nTwo variables are defined:\n\n- **host**: The base URL of the API (`https://localhost:7162` by default).\n- **token**: Used to store the authentication token received from the AdminAuthenticate or UserAuthenticate requests.\n    \n\n### Usage\n\nTo use this collection:\n\n1. Import it into Postman.\n2. Ensure the **host** variable is set correctly for your environment.\n3. Start by authenticating as an admin or user to obtain a token.\n4. Use the token for authenticated requests as required.\n    \n\nThis collection facilitates comprehensive testing and interaction with a system managing users and orders, showcasing a mix of CRUD operations, authentication mechanisms, and dynamic data handling through Postman variables and scripts.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29156451"
	},
	"item": [
		{
			"name": "AdminAuthenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.collectionVariables.set(\"token\", data.token)\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - username and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('token');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Username is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"admin\",\r\n  \"password\": \"Password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/authenticate",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-OrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0eb1",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0eb1"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangeOrderSubmissionToUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"string\",\r\n  \"lastname\": \"string\",\r\n  \"email\": \"user@example.com\",\r\n  \"phone\": \"+92841834393\",\r\n  \"priorityId\": \"string\",\r\n  \"createDate\": \"2024-02-01T16:02:12.268Z\",\r\n  \"pickupDate\": \"2024-02-01T16:02:12.268Z\",\r\n  \"serviceId\": \"string\",\r\n  \"totalPrice_CHF\": 0,\r\n  \"statusId\": \"string\",\r\n  \"comment\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0eb0/user/65ba5b084b0c591ed39d0e97",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0eb0",
						"user",
						"65ba5b084b0c591ed39d0e97"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserRegister",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"Postman\",\r\n  \"password\": \"Password1\",\r\n  \"role\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Benutzer field is present in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('benutzer');\r",
							"});\r",
							"\r",
							"pm.test(\"Message field is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/api/user/65ba5b084b0c591ed39d0e9b",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"65ba5b084b0c591ed39d0e9b"
					]
				}
			},
			"response": []
		},
		{
			"name": "All-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user).to.be.an('object');\r",
							"    pm.expect(user).to.include.all.keys('id', 'name', 'passwordHash', 'passwordSalt', 'passwordInputAttempt', 'isLocked', 'role');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(user => {\r",
							"        pm.expect(user.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Name is a non-empty string and in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    // Add additional checks for valid format if needed\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsLocked is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.isLocked).to.be.a('boolean');\r",
							"  });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/user/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PasswordInputAttempt is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.passwordInputAttempt).to.be.a('number');\r",
							"    pm.expect(responseData.passwordInputAttempt).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"IsLocked field is a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.isLocked).to.be.a('boolean');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/user/65ba5b084b0c591ed39d0e93",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"65ba5b084b0c591ed39d0e93"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserAuthenticate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.collectionVariables.set(\"token\", data.token)\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - username and token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.username).to.exist;\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Username is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"user\",\r\n  \"password\": \"Password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/authenticate",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "NewOrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys(\r",
							"        \"id\", \"firstname\", \"lastname\", \"email\", \"phone\", \r",
							"        \"priorityId\", \"createDate\", \"pickupDate\", \r",
							"        \"serviceId\", \"totalPrice_CHF\", \"statusId\", \r",
							"        \"comment\", \"userId\"\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Priority price is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.priority.price).to.be.a('number');\r",
							"    pm.expect(responseData.priority.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Service price is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.service.price).to.be.a('number');\r",
							"    pm.expect(responseData.service.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the status object is present and contains expected fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.status).to.have.property('id');\r",
							"    pm.expect(responseData.status).to.have.property('name');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"Test123\",\r\n  \"lastname\": \"Test456\",\r\n  \"email\": \"user@example.com\",\r\n  \"phone\": \"0295311289\",\r\n  \"priorityId\": \"65ba5b084b0c591ed39d0e9f\",\r\n  \"createDate\": \"2023-11-19T19:58:15.913Z\",\r\n  \"pickupDate\": \"2023-11-19T19:58:15.913Z\",\r\n  \"serviceId\": \"65ba5b084b0c591ed39d0ea4\",\r\n  \"comment\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/OrderSubmission/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "All-OrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(order){\r",
							"    pm.expect(order.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify priority and service objects have required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.priority).to.be.an('object').that.has.all.keys('id', 'name', 'price');\r",
							"        pm.expect(order.service).to.be.an('object').that.has.all.keys('id', 'name', 'price');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(order) {\r",
							"        pm.expect(order.totalPrice_CHF).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/OrderSubmission/",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-OrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Priority price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.priority.price).to.be.a('number');\r",
							"  pm.expect(responseData.priority.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Service price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.service.price).to.be.a('number');\r",
							"  pm.expect(responseData.service.price).to.be.at.least(0, \"Service price should be a non-negative number\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0ebf",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0ebf"
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-UpdateOrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys(\r",
							"        'id', 'firstname', 'lastname', 'email', 'phone', 'priorityId',\r",
							"        'createDate', 'pickupDate', 'serviceId', 'totalPrice_CHF',\r",
							"        'statusId', 'comment', 'userId'\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the priority object - id, name, and price\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.priority).to.exist.and.to.be.an('object');\r",
							"  pm.expect(responseData.priority.id).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.priority.name).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.priority.price).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the service object - id, name, and price\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.service).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.service.id).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.service.name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.service.price).to.exist.and.to.be.a('number');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"Test\",\r\n  \"lastname\": \"Hampelmann\",\r\n  \"email\": \"user@example.com\",\r\n  \"phone\": \"+589146186641\",\r\n  \"priorityId\": \"65ba5b084b0c591ed39d0e9f\",\r\n  \"createDate\": \"2023-11-19T20:16:00.967Z\",\r\n  \"pickupDate\": \"2023-11-19T20:16:00.967Z\",\r\n  \"serviceId\": \"65ba5b084b0c591ed39d0ea7\",\r\n  \"price\": 200,\r\n  \"statusId\": \"65ba5b084b0c591ed39d0ea8\",\r\n  \"comment\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0eb5",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0eb5"
					]
				}
			},
			"response": []
		},
		{
			"name": "ById-CancelOrderSubmission",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    const requiredFields = [\"id\", \"firstname\", \"lastname\", \"email\", \"phone\", \"priorityId\", \"createDate\", \"pickupDate\", \"serviceId\", \"totalPrice_CHF\", \"statusId\", \"comment\", \"userId\"];\r",
							"    \r",
							"    requiredFields.forEach(field => {\r",
							"        pm.expect(responseData).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalPrice_CHF).to.be.a('number');\r",
							"    pm.expect(responseData.totalPrice_CHF).to.be.at.least(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0eaf/cancel",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0eaf",
						"cancel"
					]
				}
			},
			"response": []
		},
		{
			"name": "AssignOrderSubmissionToUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{host}}/api/OrderSubmission/65ba5b094b0c591ed39d0eb0/assign/65ba5b084b0c591ed39d0e94",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"OrderSubmission",
						"65ba5b094b0c591ed39d0eb0",
						"assign",
						"65ba5b084b0c591ed39d0e94"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserUnlock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is text/plain\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the response message is not empty\", function () {\r",
							"    const responseData = pm.response.text();\r",
							"\r",
							"    pm.expect(responseData).to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userName\": \"user8\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/user/unlock",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"user",
						"unlock"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "https://localhost:7162",
			"type": "string"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}